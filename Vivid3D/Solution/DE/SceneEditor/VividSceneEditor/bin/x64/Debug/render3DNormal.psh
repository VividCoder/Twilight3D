Texture2D    color_Texture;
SamplerState color_Texture_sampler; // By convention, texture samplers must use the '_sampler' suffix
Texture2D normal_Texture;
SamplerState normal_Texture_sampler;

struct PSInput 
{ 
    float4 Pos   : SV_POSITION; 
    float3 UV : TEX_COORD;
	float3 Normal : NORMAL;
	float3 Tangent : TANGENT;
    float3 lightDiff : LIGHT_DIFF;
    float3 lightSpec : LIGHT_SPEC;
    float3 worldPos : WORLD_POS;
    float3 lightPos : LIGHT_POS;
    float3 camPos : CAM_POS;
  
};

struct PSOutput
{ 
    float4 Color : SV_TARGET; 
};


float getDiffuseIntensity(float3 normalNormalized, float3 vertexToLightNormalized) {
    return saturate(dot(normalNormalized, vertexToLightNormalized));
}

float getSpecularIntensity(float3 vertexPos, float3 normalNormalized, float3 cameraPos, float3 vertexToLightNormalized, float power) {
    float3 v = normalize(cameraPos - vertexPos);
    float3 r = reflect(-vertexToLightNormalized, normalNormalized);
    return pow(saturate(dot(r, v)), power);
}


// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be indentical.
void main(in  PSInput  PSIn,
          out PSOutput PSOut)
{
    
   float3x3 toWorld = float3x3(PSIn.Tangent,cross(PSIn.Tangent,PSIn.Normal),PSIn.Normal);
   float3 normalMap = normal_Texture.Sample(normal_Texture_sampler,PSIn.UV.xy).rgb * 2.0 - 1.0;
   normalMap = mul(normalMap.rgb,toWorld);

   float3 normal = normalize(normalMap);
   float3 lightDir = normalize(PSIn.lightPos - PSIn.worldPos);

    float diffuseI = getDiffuseIntensity(normal,lightDir);



    float3 texCol = color_Texture.Sample(color_Texture_sampler,PSIn.UV.xy).rgb;
    
    float specularIntensity = getSpecularIntensity(PSIn.worldPos, normal, PSIn.camPos, lightDir, 8);

    float3 final = (texCol * diffuseI) + specularIntensity;


    PSOut.Color = float4(final,1.0);
    
}
