Texture2D    color_Texture;
SamplerState color_Texture_sampler; // By convention, texture samplers must use the '_sampler' suffix
Texture2D normal_Texture;
SamplerState normal_Texture_sampler;

struct PSInput 
{ 
    float4 Pos   : SV_POSITION; 
    float3 UV : TEX_COORD;
	float3 Normal : NORMAL;
	float3 Tangent : TANGENT;
    float3 eyeDir : E_DIR;
    float3 lightDir : LIGHT_DIR;

  
};

struct PSOutput
{ 
    float4 Color : SV_TARGET; 
};

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be indentical.
void main(in  PSInput  PSIn,
          out PSOutput PSOut)
{
    
    float2 uv = PSIn.UV.xy;
    
    float3 B = cross(PSIn.Normal, PSIn.Tangent);
    
    float4 texCol = color_Texture.Sample(color_Texture_sampler, uv);
    
    float3 normal = normalize(PSIn.Normal);
    
    float3 bumpNorm = normal_Texture.Sample(normal_Texture_sampler, uv).rgb;
    
    float3 normalCom = 2 * (bumpNorm - 0.5);
    
    bumpNorm = normalCom;
    
    
    
    float3x3 TBN = float3x3(PSIn.Tangent, B, PSIn.Normal);
    
    normal = mul(bumpNorm, TBN);
    
    float3 lightDir = normalize(PSIn.lightDir);
   // float3 viewDir = normalize(PSIn.eyeDir);
    
    //float n_dol_l = saturate(dot(lightDir, normal));
    
    float fL = saturate(dot(normal, lightDir));
    
    float3 diffuseCol = fL;
    
    float4 output = float4(diffuseCol.r, diffuseCol.g, diffuseCol.b, 1.0);
    
   //output = output * 0.1f;
    
    
    
    
    
    
    
    float4 test = float4(normal.x, normal.y, normal.z, 1.0);
    
    PSOut.Color = output * (texCol); //   +texCol;
 
    //fl////oat4 cc = normal_Texture.Sample(normal_Texture_sampler, PSIn.UV.xy);
    
    
    
   // PSOut.Color = texCol * fcol;
    
}
